import cv2
import numpy as np
from sklearn.metrics import pairwise

background = None
#Define les coordonnées de rectangel où on va mettre la main
roi_top = 10
roi_bottom = 300
roi_right = 350
roi_left = 650

##Sépare les elements de premier plan de l'arrière-plan et par un masque de premier plan.
##Cette technique est utilisée pour détecter des objets en mouvement dynamique à partie de cameras statique
def Soustraction_Arrire_Plan(frame):
    global background
    if background is None:
        background = frame.copy().astype("float")
        return None
    cv2.accumulateWeighted(frame, background,0.5)

def Threshold_handsegment(frame, threshold_min=25,threshold_max=255):
    global background
    diff = cv2.absdiff(background.astype("uint8"), frame) #Trouve la diffrence entre BackGround et la déniere frame
    ret, thresholded = cv2.threshold(diff, threshold_min,threshold_max, cv2.THRESH_BINARY)
    #Countours : est une Liste Pythone de tous les coordonnées des points de countours de l'image 
    image, contours, hierarchy = cv2.findContours(thresholded.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    if len(contours) == 0:
        return None
    else:
        #Base sur la zone de coutour, donne les coodonnées de la countour le plus longe
        hand_segment = max(contours, key=cv2.contourArea) 
        return (thresholded, hand_segment)

def count_fingers(thresholded, hand_segment):
    #Trace un polygone autour des point de hand_segment
    conv_hull = cv2.convexHull(hand_segment)
    
    # Prendre les coordonnées des points les plus haut,bas, gauche, droit
    top    = tuple(conv_hull[conv_hull[:, :, 1].argmin()][0])
    bottom = tuple(conv_hull[conv_hull[:, :, 1].argmax()][0])
    left   = tuple(conv_hull[conv_hull[:, :, 0].argmin()][0])
    right  = tuple(conv_hull[conv_hull[:, :, 0].argmax()][0])
    
    #Coordonées de centre de la main
    cX = (left[0] + right[0]) // 2
    cY = (top[1] + bottom[1]) // 2
    
    # la distance entre le centre de la main et les points le plus haut,bas,droit,gauche
    distance = pairwise.euclidean_distances([(cX, cY)], Y=[left, right, top, bottom])[0]
    # prendre les valeur maximal
    max_distance = distance.max()
    
    # creation d'un cercle autour de la main
    radius = int(0.8 * max_distance)
    circumference = (2 * np.pi * radius)
    #une image vide de la même dimension de threshold pour trace la cerle
    circular_roi = np.zeros(thresholded.shape[:2], dtype="uint8")
    # Trace la cercle
    cv2.circle(circular_roi, (cX, cY), radius, 255, 10)
    
    
    circular_roi = cv2.bitwise_and(thresholded, thresholded, mask=circular_roi)

    # les poits de Countours qui sont a exterieur de la cercle
    image, contours, hierarchy = cv2.findContours(circular_roi.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    
    count = 0
    for cnt in contours:
        (x, y, w, h) = cv2.boundingRect(cnt)
        #verification de la position de doigt
        out_of_wrist = ((cY + (cY * 0.25)) > (y + h))
        limit_points = ((circumference * 0.25) > cnt.shape[0])
        
        
        if  out_of_wrist and limit_points:
            count += 1

    return count





cam = cv2.VideoCapture(0)

# Initialisation d'un frame
num_frames = 0
while True:
    ret, frame = cam.read()
    frame = cv2.flip(frame, 1)
    #Creation d'un rectangel pour mettre la main
    roi = frame[roi_top:roi_bottom, roi_right:roi_left]
    gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)

    # Pour les 60 premier freme on va calcule l'image statique de Bachgroud.
    if num_frames < 60:
        Soustraction_Arrire_Plan(gray)
        if num_frames <= 59:
            cv2.putText(frame, "WAIT! GETTING BACKGROUND AVG.", (200, 400), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255), 2)
            cv2.imshow("Finger Count",frame)
            
    else:
        # Apres avoir the backGroup on peut le compare avec les nouveaux frame.
        hand = Threshold_handsegment(gray)
        if hand is not None:
            
            thresholded, hand_segment = hand

            # Trace a polygone autre de la main
            cv2.drawContours(frame, [hand_segment + (roi_right, roi_top)], -1, (255, 0, 0),1)

            # calcule les doigts
            fingers = count_fingers(thresholded, hand_segment)
            cv2.putText(frame, str(fingers), (70, 45), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255), 2)
            cv2.imshow("Thesholded", thresholded)
    cv2.rectangle(frame, (roi_left, roi_top), (roi_right, roi_bottom), (0,0,255), 5)
    num_frames += 1
    cv2.imshow("Finger Count", frame)
    
    k = cv2.waitKey(1) & 0xFF

    if k == 27:
        break

# Release the camera and destroy all the windows
cam.release()
cv2.destroyAllWindows()

